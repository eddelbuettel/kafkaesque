% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kafka_consumer_class.R
\name{kafka_consumer_class}
\alias{kafka_consumer_class}
\title{R6 Class for Kafka Consumer}
\description{
R6 Class for Kafka Consumer

R6 Class for Kafka Consumer
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{java_consumer}}{reference to the underlying Java object
Initialize}

\item{\code{records}}{If poll() did fetch any messages, they are stored here until the
next call to poll().

Note: Consider using consume methods instead of managing records on your own.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{kafka_consumer_class$new()}}
\item \href{#method-finalize}{\code{kafka_consumer_class$finalize()}}
\item \href{#method-start}{\code{kafka_consumer_class$start()}}
\item \href{#method-end}{\code{kafka_consumer_class$end()}}
\item \href{#method-running}{\code{kafka_consumer_class$running()}}
\item \href{#method-poll}{\code{kafka_consumer_class$poll()}}
\item \href{#method-commit}{\code{kafka_consumer_class$commit()}}
\item \href{#method-offset}{\code{kafka_consumer_class$offset()}}
\item \href{#method-consume_next}{\code{kafka_consumer_class$consume_next()}}
\item \href{#method-consume_loop}{\code{kafka_consumer_class$consume_loop()}}
\item \href{#method-props}{\code{kafka_consumer_class$props()}}
\item \href{#method-topics_subscribe}{\code{kafka_consumer_class$topics_subscribe()}}
\item \href{#method-topics_subscription}{\code{kafka_consumer_class$topics_subscription()}}
\item \href{#method-topics_list}{\code{kafka_consumer_class$topics_list()}}
\item \href{#method-clone}{\code{kafka_consumer_class$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new consumer object.
Instead of \code{kafka_class_consumer$new()} one can use \code{kafka_consumer()}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$new(props)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{props}}{list of key value pairs both of type string that should
be used as consumer properties.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
returns object reference for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-finalize}{}}}
\subsection{Method \code{finalize()}}{
Code run when object is removed from session
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$finalize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-start"></a>}}
\if{latex}{\out{\hypertarget{method-start}{}}}
\subsection{Method \code{start()}}{
Spin up consumer and connect it to Kafka cluster
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$start()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
returns object reference for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-end"></a>}}
\if{latex}{\out{\hypertarget{method-end}{}}}
\subsection{Method \code{end()}}{
Disconnect consumer from Kafka cluster
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$end()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
returns object reference for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-running"></a>}}
\if{latex}{\out{\hypertarget{method-running}{}}}
\subsection{Method \code{running()}}{
Whether or not consumer is active (has been started or not)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$running()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TRUE/FALSE
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-poll"></a>}}
\if{latex}{\out{\hypertarget{method-poll}{}}}
\subsection{Method \code{poll()}}{
Polling for messages
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$poll(timeout_ms = Inf)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{timeout_ms}}{number of miliseconds to wait for polling to return
messages, defaults to Inf}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
returns object reference for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-commit"></a>}}
\if{latex}{\out{\hypertarget{method-commit}{}}}
\subsection{Method \code{commit()}}{
Commit offsets returned on the last poll() for all the subscribed
list of topics and partitions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$commit(sync = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sync}}{synchronous or asynchronous commit}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
returns object reference for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-offset"></a>}}
\if{latex}{\out{\hypertarget{method-offset}{}}}
\subsection{Method \code{offset()}}{
Set/return offsets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$offset(offset = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{defaults to NULL, if set to NULL now new offset will
be set, if set to a number this number will be used as new offset}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-consume_next"></a>}}
\if{latex}{\out{\hypertarget{method-consume_next}{}}}
\subsection{Method \code{consume_next()}}{
Consume one message either from the records already fetched from last poll or via initiating a new poll.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$consume_next()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-consume_loop"></a>}}
\if{latex}{\out{\hypertarget{method-consume_loop}{}}}
\subsection{Method \code{consume_loop()}}{
Method that is basically an infinite loop (until the check expression
evaluates to FALSE) that will evaluate the supplied expressionfor
each loop.

There are several objects available to the expression supplied:

- msgs: a data.frame/data.table with one or more rows - see batch parameter
- counter: single number equal to the number of messages already processed.
- start_time: the result of a call to Sys.time() when first the method started
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$consume_loop(
  expr = expression(print(msgs)),
  check = expression(counter < 1),
  batch = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{expr}}{expression (e.g. via \code{expression(...)}) that will
process a single message}

\item{\code{check}}{expression (e.g. via \code{expression(...)}) that will
evaluate to TRUE or FALSE to either further process messages or
stop processing and ask function to return}

\item{\code{batch}}{defaults to FALSE, Kafka's the default is to poll for as much
data as one can get given the consumers limits on the number and
size of messages as well as the chosen timeout. No matter how many
data is returned from a poll the method process - if batch is set to
FALSE - return only a single message at a time. If batch is set to
TRUE however the msgs data.frame/data.table will contain all messages
that were retrieved by the last poll unless consumed already.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-props"></a>}}
\if{latex}{\out{\hypertarget{method-props}{}}}
\subsection{Method \code{props()}}{
Polling for messages
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$props()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-topics_subscribe"></a>}}
\if{latex}{\out{\hypertarget{method-topics_subscribe}{}}}
\subsection{Method \code{topics_subscribe()}}{
Subscribe to one or more topics
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$topics_subscribe(topics)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{topics}}{character vector defining topics or topic regex to subscribe to}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
returns object reference for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-topics_subscription"></a>}}
\if{latex}{\out{\hypertarget{method-topics_subscription}{}}}
\subsection{Method \code{topics_subscription()}}{
List current subscription
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$topics_subscription()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-topics_list"></a>}}
\if{latex}{\out{\hypertarget{method-topics_list}{}}}
\subsection{Method \code{topics_list()}}{
List topics available to consumer
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$topics_list(full = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{full}}{defaults to FALSE, whether or not to return all data
returned fro Java object (TRUE) or only a simple character vector
listing the names of the data topics available for consumption
(FALSE)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_consumer_class$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
